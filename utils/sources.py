#!/usr/bin/env python3
"""
Quellen-Konstanten f√ºr Medien-Empfehlungen

Definiert standardisierte Quellen-Bezeichnungen f√ºr alle Medientypen.
"""

# Film-Quellen
SOURCE_OSCAR_BEST_PICTURE = "Oscar (Bester Film)"
SOURCE_FBW_EXCEPTIONAL = "FBW Pr√§dikat besonders wertvoll"
SOURCE_BBC_100_FILMS = "BBC 100 Greatest Films of the 21st Century"

# Musik-Quellen
SOURCE_OSCAR_BEST_SCORE = "Oscar (Beste Filmmusik)"
SOURCE_RADIO_EINS_TOP_100 = "Radio Eins Top 100 Alben 2019"

# Buch-Quellen
SOURCE_NYT_CANON = "New York Times Kanon des 21. Jahrhunderts"


# Personalisierte Empfehlungen
def SOURCE_TOP_ARTIST(artist_name):
    """Generiert Quellen-String f√ºr Top-Interpreten"""
    return f"Interessant f√ºr dich (Top-Interpret: {artist_name})"


# Quellen-Emojis f√ºr GUI
SOURCE_EMOJIS = {
    SOURCE_OSCAR_BEST_PICTURE: "üèÜ",
    SOURCE_OSCAR_BEST_SCORE: "üéµ",
    SOURCE_FBW_EXCEPTIONAL: "‚≠ê",
    SOURCE_BBC_100_FILMS: "üé¨",
    SOURCE_RADIO_EINS_TOP_100: "üìª",
    SOURCE_NYT_CANON: "üìö",
}


def get_source_emoji(source):
    """
    Gibt das passende Emoji f√ºr eine Quelle zur√ºck.

    Args:
        source (str): Quellen-String

    Returns:
        str: Emoji oder leerer String
    """
    # Exakte √úbereinstimmung
    if source in SOURCE_EMOJIS:
        return SOURCE_EMOJIS[source]

    # Pr√ºfe auf "Interessant f√ºr dich"
    if source and "Interessant f√ºr dich" in source:
        return "üíé"

    return ""


def format_source_for_display(source):
    """
    Formatiert eine Quelle f√ºr die Anzeige mit Emoji.

    Args:
        source (str): Quellen-String

    Returns:
        str: Formatierter String mit Emoji
    """
    emoji = get_source_emoji(source)
    if emoji:
        return f"{emoji} {source}"
    return source
